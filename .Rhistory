data(galton)
library(kernlab)
library(UsingR)
library(galton)
data(galton)
manipulate(myhist(x),x=slider(62,74,step=0.5))
myhist<-function(x){
+ hist(galton$child,col="blue",breaks=100)
+ lines(c(x,x),c(0,150),col="red",lwd=5)
+ mse<-mean((galton$child-x)^2)
+ text(63,150,paste("mu= ",x))
+ text(63,140,paste("MSE= ",round(mse,2)))
+ }
manipulate(myhist(x),x=slider(62,74,step=0.5))
myhist<-function(x){
+     hist(galton$child,col="blue",breaks=100)
+     lines(c(x,x),c(0,150),col="red",lwd=5)
+     mse<-mean((galton$child-x)^2)
+     text(63,150,paste("mu= ",x))
+     text(63,110,paste("MSE= ",round(mse,2)))
+ }
manipulate(myhist(x),x=slider(62,74,step=0.5))
head(trainspam)
data(airquality)
names(airquality)
plot(Ozone~Wind)
plot(Ozone~Wind,airquality)
model1<-lm(Ozone~Wind,airquality)
abline(model1,lwd=2)
plot(model1)
model1<-lm(Ozone~Wind,airquality)
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
nrow(sim_data)
nrow(sim_data)
ambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
abline(v=1/lambda, col="red")
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
abline(v=1/lambda, col="red")
xfit <- seq(min(rowmean), max(rowmean), length=100)
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
abline(v=1/lambda, col="red")
xfit <- seq(min(rowmean), max(rowmean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
abline(v=1/lambda, col="red")
xfit <- seq(min(rowmean), max(rowmean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
abline(v=1/lambda, col="red")
xfit <- seq(min(rowmean), max(rowmean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(sample_size)))
lines(xfit, yfit, pch=22, col="red", lty=2)
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean)
lines(density(rowmean))
abline(v=1/lambda, col="red")
xfit <- seq(min(rowmean), max(rowmean), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(exp_sample)))
lines(xfit, yfit, pch=22, col="red", lty=2)
legend('topright', c("simulation", "theoretical"), lty=c(1,2), col=c("black", "red"))
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean,prob=TRUE)
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean,prob=TRUE)
lines(density(rowmean))
lambda<-0.2
exp_sample<-40
no_sims <-1000
sim_data<-matrix(rexp(exp_sample * no_sims,lambda),no_sims,exp_sample)
rowmean<-rowMeans(sim_data)
sample_mean<-mean(rowmean)
sample_sd<-sd(rowmean)
hist(rowmean,prob=TRUE)
density(rowmean)
lines(density(rowmean))
hist(rowmean,breaks=50,main="Distribution of Sample Means",xlab="Sample Mean")
lines(density(rowmean))
lines(density(rowmean))
hist(rowmean,prob=TRUE,breaks=50,main="Distribution of Sample Means",xlab="Sample Mean")
lines(density(rowmean))
library(ggplot2)
library(datasets)
data(ToothGrowth)
class(ToothGrowth)
dim(ToothGrowth)
head(ToothGrowth)
unique(ToothGrowth$supp)
unique(ToothGrowth$dose)
nrows(ToothGrowth)
nrow(ToothGrowth)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
summary(ToothGrowth)
qplot(dose,len,facets=.~supp,data=ToothGrowth,geom=c("bar","smooth"),method="lm",stat="identity",main="ToothGrowth Data -len vs dose with given supp",xlab="dose",ylab="len",position="dodge")+theme(axis.text.x = element_text(angle=90, size=7,hjust=0, vjust=1))
library(ggplot2)
library(datasets)
data(ToothGrowth)
summary(ToothGrowth)
qplot(dose,len,facets=.~supp,data=ToothGrowth,geom=c("bar","smooth"),method="lm",stat="identity",main="ToothGrowth Data -len vs dose with given supp",xlab="dose",ylab="len",position="dodge")+theme(axis.text.x = element_text(angle=90, size=7,hjust=0, vjust=1))
t1 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
t1
t1 <- t.test(len~supp, paired=F, var.equal=F, data=ToothGrowth)
t1
t1 <- t.test(len~supp,data=ToothGrowth)
t1
unique(ToothGrowth$dose)
t1 <- t.test(len~supp,data=ToothGrowth,paired=TRUE)
T1
t1
t1 <- t.test(len~supp,data=ToothGrowth)
t1
t1 <- t.test(len~supp,data=ToothGrowth)
t1
lowdose <- subset(ToothGrowth,dose==0.5)
highdose <- subset(ToothGrowth,dose==2)
t2<-t.test(highdose$len,lowdose$len,paired=FALSE)
t2
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
q()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
table(x, y)
as.data.frame(table(x, y))
library(manipulate)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manipulate)
library(UsingR)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<-lm(y~x)
fit$coef[1]
fit$coef[2]
data(mtcars)
names(mtcars)
fit<-lm(mpg~wt,mtcars)
fit$coef[2]
fit<-lm(mpg~wt -1,mtcars)
fit$coef[2]
fit$coef[1]
library(manipulate)
library(UsingR)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manipulate)
library(UsingR)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, 0, lwd = 3)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manipulate)
library(UsingR)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(5, beta, lwd = 3)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manipulate)
library(UsingR)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(1, beta, lwd = 3)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
cov(x,y)
hist(galton$child,col="blue",breaks=100)
meanchild<-mean(galton$child)
meanchild
lines(rep(meanchild,100))
lines(rep(meanchild,100),seq(0,150,length=100))
hist(galton$child,col="blue",breaks=100)
meanchild<-mean(galton$child)
lines(rep(meanchild,100),seq(0,150,length=100))
rep(meanchild,100)
r<-rep(meanchild,100)
lines(r)
plot(galton$child,galton$parent)
freqdata<-as.data.frame(table(galton$parent,galton$child))
names(freqdata)
names(freqdata) <- c("child","parent","freq")
plot(freqdata$child,freqdata$parent)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<-lm(y ~ x -1)
fit$coef[1]
fit$coef[2]
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(xw)
mean(x*w)
mean(w*x)
weighted.mean(x*w)
weighted.mean(w*x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x, w)
sum(w*x)
sum(w*x)/sum(w)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
xmean<-mean(x)
xsd<-sd(x)
xmean
xsd
z<-(x-xmean)/xsd
z
mean(z)
sd(z)
cov(x,y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cov(x,y)
x1<-sum(x-mean(x))
y1<-sum(y-mean(y))
x1*y1
x1
y1
cov(x,y)
x-mean(x)
sum((x-mean(x)) * (y-mean(y)))
z<-sum((x-mean(x)) * (y-mean(y)))
z/9
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m<-x-mean(x)
n<-sd(x)
m/n
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit<-lm(y~x)
fit$coef[1]
fit$coef[2]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
setwd("C:/Users/Kaushik/Documents/Data Science Program/Practical Machine Learning")
setInternet2(use = TRUE)
testing_url<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url=testing_url,destfile="./testing.csv")
testing<-read.csv("testing.csv",header=T,na.strings=c("NA","#DIV/0!",""))
n<-names(testing)
f <- as.formula(paste("as.factor(classe) ~", paste(n[!n %in% "classe"], collapse = " + ")))
f
names(testing)
f <- as.formula(paste("as.factor(classe) ~", paste(n[!n %in% "classe"], collapse = " + ")))
f
model<-train(f,data=test,method="rf")
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
library(ggplot2)
setwd("C:/Users/Kaushik/Documents/Data Science Program/Practical Machine Learning")
setInternet2(use = TRUE)
training_url<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url=training_url,destfile="./training.csv")
training<-read.csv("training.csv",header=T,na.strings=c("NA","#DIV/0!",""))
testing_url<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url=testing_url,destfile="./testing.csv")
testing<-read.csv("testing.csv",header=T,na.strings=c("NA","#DIV/0!",""))
inTrain<-createDataPartition(y=training$classe,p=0.75,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
dim(train)
summary(training)
NAindex <- apply(train,2,function(x) {sum(is.na(x))})
train<-train[,which(NAindex==0)]
NAindex <- apply(test,2,function(x) {sum(is.na(x))})
test<-test[,which(NAindex==0)]
train = train[,-c(1:7)]
test = test[,-c(1:7)]
train<-train[,-nearZeroVar(train)]
test<-test[,-nearZeroVar(test)]
dim(train)
dim(test)
head(train)
head(test)
dim(training)
inTrain<-createDataPartition(y=training$classe,p=0.75,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
dim(train)
NAindex <- apply(train,2,function(x) {sum(is.na(x))})
train<-train[,which(NAindex==0)]
NAindex <- apply(test,2,function(x) {sum(is.na(x))})
test<-test[,which(NAindex==0)]
train = train[,-c(1:7)]
test = test[,-c(1:7)]
dim(train)
inTrain<-createDataPartition(y=training$classe,p=0.75,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
dim(train)
NAindex <- apply(train,2,function(x) {sum(is.na(x))})
train<-train[,which(NAindex==0)]
dim(train)
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
library(ggplot2)
setwd("C:/Users/Kaushik/Documents/Data Science Program/Practical Machine Learning")
setInternet2(use = TRUE)
training_url<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url=training_url,destfile="./training.csv")
training<-read.csv("training.csv",header=T,na.strings=c("NA","#DIV/0!",""))
testing_url<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url=testing_url,destfile="./testing.csv")
testing<-read.csv("testing.csv",header=T,na.strings=c("NA","#DIV/0!",""))
inTrain<-createDataPartition(y=training$classe,p=0.75,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
dim(train)
summary(training)
NAindex <- apply(train,2,function(x) {sum(is.na(x))})
train<-train[,which(NAindex==0)]
dim(train)
NAindex <- apply(test,2,function(x) {sum(is.na(x))})
test<-test[,which(NAindex==0)]
train = train[,-c(1:7)]
test = test[,-c(1:7)]
dim(train)
train<-train[,-nearZeroVar(train)]
test<-test[,-nearZeroVar(test)]
dim(train)
dim(test)
inTrain<-createDataPartition(y=training$classe,p=0.75,list=FALSE)
train<-training[inTrain,]
test<-training[-inTrain,]
dim(train)
summary(training)
NAindex <- apply(train,2,function(x) {sum(is.na(x))})
train<-train[,which(NAindex==0)]
NAindex <- apply(test,2,function(x) {sum(is.na(x))})
test<-test[,which(NAindex==0)]
train = train[,-c(1:7)]
test = test[,-c(1:7)]
dim(train)
dim(test)
set.seed(333)
n<-names(train)
n
f <- as.formula(paste("as.factor(classe) ~", paste(n[!n %in% "classe"], collapse = " + ")))
model1<-train(f,data=train,method="rf")
